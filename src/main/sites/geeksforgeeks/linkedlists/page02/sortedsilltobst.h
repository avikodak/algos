/****************************************************************************************************************************************************
 *  File Name   		: sortedsilltobst.h 
 *	File Location		: C:\Users\AVINASH\Desktop\CC++\algorithms\src\main\sites\geeksforgeeks\linkedlists\page02\sortedsilltobst.h
 *  Created on			: May 13, 2014 :: 7:26:42 PM
 *  Author				: AVINASH
 *  Testing Status 		: TODO
 *  URL 				: TODO
****************************************************************************************************************************************************/

/****************************************************************************************************************************************************/
/* 														NAMESPACE DECLARATION AND IMPORTS 														    */
/****************************************************************************************************************************************************/

using namespace std;
using namespace __gnu_cxx;

/****************************************************************************************************************************************************/
/* 																INCLUDES		 																    */
/****************************************************************************************************************************************************/

#include <string>
#include <vector>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <list>
#include <map>
#include <set>
#include <bitset>
#include <functional>
#include <numeric>
#include <utility>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include <hash_map>
#include <stack>
#include <queue>
#include <limits.h>
#include <algos/utils/ds/tree/treeds.h>
#include <algos/utils/common/tree/tree.h>

/****************************************************************************************************************************************************/
/* 															USER DEFINED CONSTANTS 																    */
/****************************************************************************************************************************************************/

#define null NULL

/****************************************************************************************************************************************************/
/* 																MAIN CODE START 																    */
/****************************************************************************************************************************************************/

#ifndef SORTEDSILLTOBST_H_
#define SORTEDSILLTOBST_H_

/****************************************************************************************************************************************************/
/* 																	O(N) Algorithm 																    */
/****************************************************************************************************************************************************/

itNode *sortedSillToBST(sillNode **ptr,int size){
	if(size <= 0){
		return null;
	}
	sillNode *left = sortedSillToBST(ptr,size/2);
	itNode *root = new itNode((*ptr)->value);
	root->left = left;
	(*ptr) = (*ptr)->next;
	root->right = sortedSillToBST(ptr,size - size/2 -1);
	return root;
}

/****************************************************************************************************************************************************/
/* 																O(NLOGN) Algorithm 																    */
/****************************************************************************************************************************************************/

/****************************************************************************************************************************************************/
/* 																O(N^2) Algorithm 																    */
/****************************************************************************************************************************************************/
sillNode *getMiddleOfSill(sillNode *startPtr,sillNode *endPtr){
	if(ptr == null){
		return null;
	}
	sillNode *slowPtr,*fastPtr;
	slowPtr = startPtr;
	fastPtr = startPtr;
	while(slowPtr != endPtr && fastPtr != endPtr && fastPtr->next != endPtr){
		slowPtr = slowPtr->next;
		fastPtr = fastPtr->next->next;
	}
	return slowPtr;
}

itNode *sortedSillToBSTON(sillNode *ptr){

}

#endif /* SORTEDSILLTOBST_H_ */


/****************************************************************************************************************************************************/
/* 																MAIN CODE END 																	    */
/****************************************************************************************************************************************************/
